@using LaboratorioClient.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<div style="display:flex;justify-content:flex-start;position:fixed;width:100%">
    <div style="margin-top:-600px">
        <div style="position:fixed">
            <div style="cursor:pointer;background-color:#8bd07b;padding:10px">
                <div style="width:400px">
                    <!-- ======= Pricing Section ======= -->
                    <section id="pricing" class="padd-section text-cente">

                        <div class="container" data-aos="fade-up">
                            <div class="section-title text-center">
                                <button class="btn btn-outline-primary" @onclick=Cerrar>X</button>
                                <h2 >Muestra</h2>
                            </div>
                            <div class="row" data-aos="fade-up" data-aos-delay="100">

                                <div class="col-12 col-lg-12">
                                    <div class="block-pricing">
                                        <div class="pricing-table">
                                            <h4>@MuestraAsignada.Fecha_Registro_E14</h4>
                                            <h2>Guia @MuestraAsignada.Numero_Guia_E14</h2>
                                            <ul class="list-unstyled">
                                               
                                                <li><b>@Componente_Cliente.E2_Tipo_Maquina.Descripcion_Maquina_E2</b> Tech Support</li>
                                           
                                                
                                            </ul>
                                            <div class="table_btn">
                                                <a href="#" class="btn"><i class="bi bi-cart"></i> Resultados</a>
                                            </div>
                                        </div>
                                    </div>
                                </div>                                
                            </div>
                        </div>
                    </section><!-- End Pricing Section -->  
                    @if (@Componente_Cliente.E2_Tipo_Maquina.Descripcion_Maquina_E2 == "Camion")
                    {
                        <img src="/Compresor.png" width="200" class="img-fluid" alt="...">
                    }
                    @if (@Componente_Cliente.E2_Tipo_Maquina.Descripcion_Maquina_E2 == "Compresor")
                    {
                        <img src="/Compresor.png" width="200" class="img-fluid" alt="...">
                    }
                    @if (@Componente_Cliente.E2_Tipo_Maquina.Descripcion_Maquina_E2 == "Planta Electrica")
                    {
                        <img src="/PlantaEle.png" width="200" class="img-fluid" alt="...">
                    }
                    
                </div>
            </div>
        </div>
    </div>
</div>
@code{
    [Parameter]
    public E5_Componente_Cliente? Componente_Cliente { get; set; }
    [Parameter]
    public EventCallback Funcion { get; set; }
    async Task Cerrar()
    {
        await Funcion.InvokeAsync();
    }
    E14_Muestra MuestraAsignada = new E14_Muestra();
    E14_Muestra nuevamuestra = new E14_Muestra();
    string RespuestaAlCrear = "";
    Conexion miconexion = new Conexion();
    public static List<E14_Muestra> Listado = new List<E14_Muestra>();
    public static List<E5_Componente_Cliente> ListadoE5_Componente_Cliente = new List<E5_Componente_Cliente>();
    public static List<E16_Courrier> ListadoE16_Courrier = new List<E16_Courrier>();
    public static List<A4_Usuario> ListadoA4_Usuario = new List<A4_Usuario>();


    async Task Guardar()
    {
        RespuestaAlCrear = "Procesando...";
        var respuesta = await Http.PostAsJsonAsync($"{miconexion.Servidor}/api/E14_Muestra/Crear", nuevamuestra);
        await Actualizar();
        RespuestaAlCrear = await respuesta.Content.ReadAsStringAsync();
        nuevamuestra.Numero_Guia_E14 = null;
    }

    async Task Actualizar()
    {
        var listado = await Http.GetFromJsonAsync<List<E14_Muestra>>($"{miconexion.Servidor}/api/E14_Muestra/Listado");
        Listado = listado;
        var listadocomponentecliente = await Http.GetFromJsonAsync<List<E5_Componente_Cliente>>($"{miconexion.Servidor}/api/E5_Componente_Cliente/Listado");
        ListadoE5_Componente_Cliente = listadocomponentecliente;
        var listadocourier = await Http.GetFromJsonAsync<List<E16_Courrier>>($"{miconexion.Servidor}/api/E16_Courrier/Listado");
        ListadoE16_Courrier = listadocourier;
        var listausuario = await Http.GetFromJsonAsync<List<A4_Usuario>>($"{miconexion.Servidor}/api/A4_Usuario/Listado");
        ListadoA4_Usuario = listausuario;
        MuestraAsignada = Listado.Where(x => x.E5_Componente_ClienteId == Componente_Cliente.Id).FirstOrDefault();

    }
    protected override async Task OnInitializedAsync()
    {
        await Actualizar();
    }
    async Task Eliminar(E14_Muestra objeto)
    {


        var respuesta = await Http.DeleteAsync($"{miconexion.Servidor}/api/E14_Muestra/Eliminar/{objeto.Id}");
        Console.WriteLine(respuesta);
        await Actualizar();
    }
}