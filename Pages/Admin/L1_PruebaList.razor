@page "/prueba"
@inject HttpClient Http
@using LaboratorioClient.Models
<div>
      <NavMenu />
 </div>

<br />
<br />
<div class="section-title">
    <h2>Prueba</h2>
</div>
<div class="row" style="display:flex;justify-content:center">
    <div class="col-4" style="cursor:pointer" data-bs-toggle="offcanvas" data-bs-target="#offcanvasTipoUnidad" aria-controls="offcanvasScrolling">
        <img src="Prueba.jpg" class="img-fluid" alt="...">
    </div>
    <div class="col-4" style="display:flex;align-items:center">

        <div class="card" style="width:500px; max-height:400px ;height:auto"
                <div class="card-body. overflow-scroll">
                    <table   class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Nombre de la Prueba</th>
                                <th>Nombre de la Unidad de Medida</th>

                                <th> </th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var i in ListadoPruebas)
                        {
                                        <tr>
                                            <td>@i.Nombre_Prueba_L1</td>
                                            <td>@i.E13_Unidad_Medida.Nombre_Unidad_Medida_E13</td>
                                                <td> <button type="button" class="btn btn-outline-secondary" @onclick="()=>Eliminar(i)">Eliminar</button> </td>
                                        </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>


        

    </div>
</div>

<div class="offcanvas offcanvas-start" data-bs-scroll="true" data-bs-backdrop="false" tabindex="-1" id="offcanvasTipoUnidad" aria-labelledby="offcanvasScrollingLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="offcanvasScrollingLabel">Listado Prueba</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <p>Laboratorio activo con presencia en mas de 18 paises</p>
        <br />
        <div>
            <label>Nombre</label>
            <input @bind-value=nuevaprueba.Nombre_Prueba_L1 class="form-control" placeholder="Nombre" />
           
            <label>Unidad Medida</label>
            <select @bind=nuevaprueba.E13_Unidad_MedidaId class="form-select" aria-label="Default select example">
                <option selected>Abrir lsita de unidades de medidas</option>
                @foreach (var i in ListadoUnidadMedida)
                {
                    <option value=@i.Id>@i.Nombre_Unidad_Medida_E13</option>
                }
            </select>
            <button @onclick=Guardar type="button" class="btn btn-secondary">
                Guardar
            </button>
            <br />
            <label>@RespuestaAlCrear</label>

        </div>
    </div>
</div>


@code {
    L1_Prueba nuevaprueba = new L1_Prueba();
    string RespuestaAlCrear = "";
    Conexion miconexion = new Conexion();
    public static List<E13_Unidad_Medida> ListadoUnidadMedida = new List<E13_Unidad_Medida>();
    public static List<L1_Prueba> ListadoPruebas = new List<L1_Prueba>();
    async Task Guardar()
    {
        RespuestaAlCrear = "Procesando...";
        var respuesta = await Http.PostAsJsonAsync($"{miconexion.Servidor}/api/L1_Prueba/Crear", nuevaprueba);
        await Actualizar();
        RespuestaAlCrear = await respuesta.Content.ReadAsStringAsync();
        nuevaprueba.Nombre_Prueba_L1 = null;
        

    }

    async Task Actualizar()
    {
        var listado = await Http.GetFromJsonAsync<List<E13_Unidad_Medida>>($"{miconexion.Servidor}/api/E13_Unidad_Medida/Listado");
        ListadoUnidadMedida = listado;
        var listadoprueba = await Http.GetFromJsonAsync<List<L1_Prueba>>($"{miconexion.Servidor}/api/L1_Prueba/Listado");
        ListadoPruebas = listadoprueba;
        
    }
    protected override async Task OnInitializedAsync()
    {
        await Actualizar();
    }

    async Task Eliminar(L1_Prueba objeto)
    {


        var respuesta = await Http.DeleteAsync($"{miconexion.Servidor}/api/L1_Prueba/Eliminar/{objeto.Id}");
        Console.WriteLine(respuesta);
        await Actualizar();
    }
}
