@page "/subempresalist"
@inject HttpClient Http
@using LaboratorioClient.Models
<div>
      <NavMenu />
 </div>
<br />
<br />
<div class="section-title">
    <h2>Sub Empresas</h2>
</div>


<div class="row" style="display:flex;justify-content:center">
    <div class="col-4" style="cursor:pointer" data-bs-toggle="offcanvas" data-bs-target="#offcanvasSubEmpresa" aria-controls="offcanvasScrolling">
        <img src="ii.png" class="img-fluid" alt="...">
    </div>
    <div class="col-4" style="display:flex;align-items:center">
        <div class="card" style="width:500px; max-height:400px ;height:auto"
                <div class="card-body. overflow-scroll">
                    <table  class="table table-striped table-hover">
                        <thead>
                            <tr>
                                
                                <th> Id Empresa Nivel 2</th>
                                <th> Nombre Empresa</th>
                                <th> </th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var i in ListadoSubEmpresa)
                        {
                                    <tr>
                                        <td>@i.ID_Empresa_Nivel2_A7_A2</td>
                                        <td>@i.A2_Empresa.A1_Tipo_Empresa @i.A2_Empresa.Nombre_Empresa_A2</td>
                                        <td> <button type="button"  class="btn btn-outline-secondary" @onclick="()=>Eliminar(i)">Eliminar</button> </td>
                                    </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>

        


    </div>
</div>

<div class="offcanvas offcanvas-start" data-bs-scroll="true" data-bs-backdrop="false" tabindex="-1" id="offcanvasSubEmpresa" aria-labelledby="offcanvasScrollingLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="offcanvasScrollingLabel">Listado sub Empresas</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <p>Laboratorio activo con presencia en mas de 18 paises</p>
        <br />
        <div>

            <label>Tipo empresa</label>
            <select @bind=nuevasubempresa.A2_EmpresaId class="form-select" aria-label="Default select example">
                <option selected>Abrir lista empresas</option>
                @foreach (var i in ListadoEmpresas)
                {
                    <option value=@i.Id> @i.Nombre_Empresa_A2</option>
                }
            </select>
           
            <label>ID Empresa Nivel 2</label>
            <input @bind-value=nuevasubempresa.ID_Empresa_Nivel2_A7_A2 class="form-control" placeholder="ID Empresa Nivel 2" />
            
            
            <br />
            <button @onclick=Guardar type="button" class="btn btn-secondary">
                Guardar
            </button>
            <br />
            <label>@RespuestaAlCrear</label>

        </div>
    </div>
</div>


  
@code {
    A7_Sub_Empresa nuevasubempresa = new A7_Sub_Empresa();
    string RespuestaAlCrear = "";
    public static List<A3_Tipo_Usuario> ListadoTipoUsuario = new List<A3_Tipo_Usuario>();
    public static List<A2_Empresa> ListadoEmpresas = new List<A2_Empresa>();
    public static List<A7_Sub_Empresa> ListadoSubEmpresa = new List<A7_Sub_Empresa>();
    public static List<A6_Ciudad> ListadoCiudades = new List<A6_Ciudad>();
    Conexion miconexion = new Conexion();
    async Task Guardar()
    {
        RespuestaAlCrear = "Procesando...";
        var respuesta = await Http.PostAsJsonAsync($"{miconexion.Servidor}/api/A7_Sub_Empresa/Crear", nuevasubempresa);
        await Actualizar();
        RespuestaAlCrear = await respuesta.Content.ReadAsStringAsync();
        //nuevotipousuario.Nombre_Ciudad_A6 = null;

    }

    async Task Actualizar()
    {

        var tiposdeusuario = await Http.GetFromJsonAsync<List<A3_Tipo_Usuario>>($"{miconexion.Servidor}/api/A3_Tipo_Usuario/Listado");
        ListadoTipoUsuario = tiposdeusuario;
        var listaempresas = await Http.GetFromJsonAsync<List<A2_Empresa>>($"{miconexion.Servidor}/api/A2_Empresa/Listado");
        ListadoEmpresas = listaempresas;

        var listadoCiudad = await Http.GetFromJsonAsync<List<A6_Ciudad>>($"{miconexion.Servidor}/api/A6_Ciudad/Listado");
        ListadoCiudades = listadoCiudad;
        var listadosubempresa = await Http.GetFromJsonAsync<List<A7_Sub_Empresa>>($"{miconexion.Servidor}/api/A7_Sub_Empresa/Listado");
        ListadoSubEmpresa = listadosubempresa;
    }
    protected override async Task OnInitializedAsync()
    {
        await Actualizar();
    }
    async Task Eliminar(A7_Sub_Empresa objeto)
    {


        var respuesta = await Http.DeleteAsync($"api/A7_Sub_Empresa/Eliminar/{objeto.Id}");
        Console.WriteLine(respuesta);
        await Actualizar();
    }
}
