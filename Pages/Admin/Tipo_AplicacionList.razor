@page "/tipoaplicacion"
@inject HttpClient Http
@using LaboratorioClient.Models
<div>
    <NavMenu />
</div>

<div id="contenedor">
    <section id="foto">
        <div class="section-title;">
            <h2>Tipo Aplicación</h2>
        </div>
        <br />
        <div class="col-12" style="cursor:pointer" data-bs-toggle="offcanvas" data-bs-target="#offcanvasPaises" aria-controls="offcanvasScrolling">
            <img src="Tipoaplicacionn.png" class="img-fluid" alt="...">
        </div>
    </section>
    <section id="contenido">
        <div class="card" style="width:auto;max-width:700px; max-height:450px ;height:auto"
                <div class="card-body. overflow-scroll">
                   <table   class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Descripción de Aplicación </th>
                                <th> </th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var i in Listado)
                        {
                                                <tr>
                                                    <td>@i.Descripcion_Aplicacion_E1</td>

                                                        <td> <button type="button" class="btn btn-outline-secondary" @onclick="()=>Eliminar(i)">Eliminar</button> </td>
                                                </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>


    </section>
</div>

<div class="offcanvas offcanvas-start" data-bs-scroll="true" data-bs-backdrop="false" tabindex="-1" id="offcanvasPaises" aria-labelledby="offcanvasScrollingLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="offcanvasScrollingLabel">Listado Tipo Aplicacion</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <p>Laboratorio activo con presencia en mas de 18 paises</p>
        <br />
        <div>
            <label>Descripcion</label>
            <input @bind-value=nuevotipoaplicacion.Descripcion_Aplicacion_E1 class="form-control" placeholder="Descripcion" />
            <br />
            <button @onclick=Guardar type="button" class="btn btn-secondary">
                Guardar País
            </button>
            <br />
            <label>@RespuestaAlCrear</label>

        </div>
    </div>
</div>

<style>
    #contenedor {
        width: auto;
        max-width: 1000px;
        height: auto;
        margin: auto;
        margin-top: 20px;
        margin-bottom: 20px;
        padding-bottom: 20px;
    }

    #contenido {
        width: 700px;
        height: 450px;
        float: right;
    }

    #foto {
        width: 280px;
        height: 500px;
        float: left
    }
</style>

@code {
    Conexion miconexion = new Conexion();
    E1_Tipo_Aplicacion nuevotipoaplicacion = new E1_Tipo_Aplicacion();
    string RespuestaAlCrear = "";
    public static List<E1_Tipo_Aplicacion> Listado = new List<E1_Tipo_Aplicacion>();
    async Task Guardar()
    {
        RespuestaAlCrear = "Procesando...";
        var respuesta = await Http.PostAsJsonAsync($"{miconexion.Servidor}/api/E1_Tipo_Aplicacion/Crear", nuevotipoaplicacion);
        await Actualizar();
        RespuestaAlCrear = await respuesta.Content.ReadAsStringAsync();
        nuevotipoaplicacion.Descripcion_Aplicacion_E1 = null;

    }

    async Task Actualizar()
    {
        var listado = await Http.GetFromJsonAsync<List<E1_Tipo_Aplicacion>>($"{miconexion.Servidor}/api/E1_Tipo_Aplicacion/Listado");
        Listado = listado;
    }
    protected override async Task OnInitializedAsync()
    {
        await Actualizar();
    }
    async Task Eliminar(E1_Tipo_Aplicacion objeto)
    {


        var respuesta = await Http.DeleteAsync($"{miconexion.Servidor}/api/E1_Tipo_Aplicacion/Eliminar/{objeto.Id}");
        Console.WriteLine(respuesta);
        await Actualizar();
    }
}

